// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.9.1
// source: log.proto

package logger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationResult int32

const (
	OperationResult_UNKNOWN OperationResult = 0
	OperationResult_SUCCESS OperationResult = 1
	OperationResult_FAILURE OperationResult = 2
)

// Enum value maps for OperationResult.
var (
	OperationResult_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUCCESS",
		2: "FAILURE",
	}
	OperationResult_value = map[string]int32{
		"UNKNOWN": 0,
		"SUCCESS": 1,
		"FAILURE": 2,
	}
)

func (x OperationResult) Enum() *OperationResult {
	p := new(OperationResult)
	*p = x
	return p
}

func (x OperationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[0].Descriptor()
}

func (OperationResult) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[0]
}

func (x OperationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationResult.Descriptor instead.
func (OperationResult) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

type UnknownCommand_UnknownCommandStatus int32

const (
	UnknownCommand_UNKNOWN         UnknownCommand_UnknownCommandStatus = 0
	UnknownCommand_NOT_FOUND       UnknownCommand_UnknownCommandStatus = 1 // Not found in $PATH.
	UnknownCommand_NOT_IMPLEMENTED UnknownCommand_UnknownCommandStatus = 2 // Executable found, but not implemented.
	UnknownCommand_LOOKUP_ERROR    UnknownCommand_UnknownCommandStatus = 3 // Error looking up the command..
)

// Enum value maps for UnknownCommand_UnknownCommandStatus.
var (
	UnknownCommand_UnknownCommandStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT_FOUND",
		2: "NOT_IMPLEMENTED",
		3: "LOOKUP_ERROR",
	}
	UnknownCommand_UnknownCommandStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"NOT_FOUND":       1,
		"NOT_IMPLEMENTED": 2,
		"LOOKUP_ERROR":    3,
	}
)

func (x UnknownCommand_UnknownCommandStatus) Enum() *UnknownCommand_UnknownCommandStatus {
	p := new(UnknownCommand_UnknownCommandStatus)
	*p = x
	return p
}

func (x UnknownCommand_UnknownCommandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnknownCommand_UnknownCommandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[1].Descriptor()
}

func (UnknownCommand_UnknownCommandStatus) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[1]
}

func (x UnknownCommand_UnknownCommandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnknownCommand_UnknownCommandStatus.Descriptor instead.
func (UnknownCommand_UnknownCommandStatus) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{6, 0}
}

type HoneypotEvent_Type int32

const (
	HoneypotEvent_UNKNOWN   HoneypotEvent_Type = 0
	HoneypotEvent_START     HoneypotEvent_Type = 1 // Honeypot started
	HoneypotEvent_TERMINATE HoneypotEvent_Type = 2 // Honeypot shutting down.
)

// Enum value maps for HoneypotEvent_Type.
var (
	HoneypotEvent_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "START",
		2: "TERMINATE",
	}
	HoneypotEvent_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"START":     1,
		"TERMINATE": 2,
	}
)

func (x HoneypotEvent_Type) Enum() *HoneypotEvent_Type {
	p := new(HoneypotEvent_Type)
	*p = x
	return p
}

func (x HoneypotEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoneypotEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[2].Descriptor()
}

func (HoneypotEvent_Type) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[2]
}

func (x HoneypotEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoneypotEvent_Type.Descriptor instead.
func (HoneypotEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{13, 0}
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the log event in micros since the UNIX epoch.
	TimestampMicros int64 `protobuf:"varint,1,opt,name=timestamp_micros,json=timestampMicros,proto3" json:"timestamp_micros,omitempty"`
	// Unique session identifier for the log message. Blank if the event
	// wasn't in the context of a session.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are assignable to LogType:
	//	*LogEntry_LoginAttempt
	//	*LogEntry_FilesystemOperation
	//	*LogEntry_OpenTtyLog
	//	*LogEntry_ConnectionLost
	//	*LogEntry_RunCommand
	//	*LogEntry_UnknownCommand
	//	*LogEntry_TerminalUpdate
	//	*LogEntry_OpenFile
	//	*LogEntry_InvalidInvocation
	//	*LogEntry_UsedCredentials
	//	*LogEntry_Download
	//	*LogEntry_Panic
	//	*LogEntry_HoneypotEvent
	LogType isLogEntry_LogType `protobuf_oneof:"log_type"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetTimestampMicros() int64 {
	if x != nil {
		return x.TimestampMicros
	}
	return 0
}

func (x *LogEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (m *LogEntry) GetLogType() isLogEntry_LogType {
	if m != nil {
		return m.LogType
	}
	return nil
}

func (x *LogEntry) GetLoginAttempt() *LoginAttempt {
	if x, ok := x.GetLogType().(*LogEntry_LoginAttempt); ok {
		return x.LoginAttempt
	}
	return nil
}

func (x *LogEntry) GetFilesystemOperation() *FilesystemOp {
	if x, ok := x.GetLogType().(*LogEntry_FilesystemOperation); ok {
		return x.FilesystemOperation
	}
	return nil
}

func (x *LogEntry) GetOpenTtyLog() *OpenTTYLog {
	if x, ok := x.GetLogType().(*LogEntry_OpenTtyLog); ok {
		return x.OpenTtyLog
	}
	return nil
}

func (x *LogEntry) GetConnectionLost() *ConnectionLost {
	if x, ok := x.GetLogType().(*LogEntry_ConnectionLost); ok {
		return x.ConnectionLost
	}
	return nil
}

func (x *LogEntry) GetRunCommand() *RunCommand {
	if x, ok := x.GetLogType().(*LogEntry_RunCommand); ok {
		return x.RunCommand
	}
	return nil
}

func (x *LogEntry) GetUnknownCommand() *UnknownCommand {
	if x, ok := x.GetLogType().(*LogEntry_UnknownCommand); ok {
		return x.UnknownCommand
	}
	return nil
}

func (x *LogEntry) GetTerminalUpdate() *TerminalUpdate {
	if x, ok := x.GetLogType().(*LogEntry_TerminalUpdate); ok {
		return x.TerminalUpdate
	}
	return nil
}

func (x *LogEntry) GetOpenFile() *OpenFile {
	if x, ok := x.GetLogType().(*LogEntry_OpenFile); ok {
		return x.OpenFile
	}
	return nil
}

func (x *LogEntry) GetInvalidInvocation() *InvalidInvocation {
	if x, ok := x.GetLogType().(*LogEntry_InvalidInvocation); ok {
		return x.InvalidInvocation
	}
	return nil
}

func (x *LogEntry) GetUsedCredentials() *Credentials {
	if x, ok := x.GetLogType().(*LogEntry_UsedCredentials); ok {
		return x.UsedCredentials
	}
	return nil
}

func (x *LogEntry) GetDownload() *Download {
	if x, ok := x.GetLogType().(*LogEntry_Download); ok {
		return x.Download
	}
	return nil
}

func (x *LogEntry) GetPanic() *Panic {
	if x, ok := x.GetLogType().(*LogEntry_Panic); ok {
		return x.Panic
	}
	return nil
}

func (x *LogEntry) GetHoneypotEvent() *HoneypotEvent {
	if x, ok := x.GetLogType().(*LogEntry_HoneypotEvent); ok {
		return x.HoneypotEvent
	}
	return nil
}

type isLogEntry_LogType interface {
	isLogEntry_LogType()
}

type LogEntry_LoginAttempt struct {
	// An attempt to log in to the honeypot.
	LoginAttempt *LoginAttempt `protobuf:"bytes,15,opt,name=login_attempt,json=loginAttempt,proto3,oneof"` // ID < 16 for fast proto decoding.
}

type LogEntry_FilesystemOperation struct {
	FilesystemOperation *FilesystemOp `protobuf:"bytes,16,opt,name=filesystem_operation,json=filesystemOperation,proto3,oneof"`
}

type LogEntry_OpenTtyLog struct {
	OpenTtyLog *OpenTTYLog `protobuf:"bytes,17,opt,name=open_tty_log,json=openTtyLog,proto3,oneof"`
}

type LogEntry_ConnectionLost struct {
	ConnectionLost *ConnectionLost `protobuf:"bytes,18,opt,name=connection_lost,json=connectionLost,proto3,oneof"`
}

type LogEntry_RunCommand struct {
	RunCommand *RunCommand `protobuf:"bytes,19,opt,name=run_command,json=runCommand,proto3,oneof"`
}

type LogEntry_UnknownCommand struct {
	UnknownCommand *UnknownCommand `protobuf:"bytes,20,opt,name=unknown_command,json=unknownCommand,proto3,oneof"`
}

type LogEntry_TerminalUpdate struct {
	TerminalUpdate *TerminalUpdate `protobuf:"bytes,21,opt,name=terminal_update,json=terminalUpdate,proto3,oneof"`
}

type LogEntry_OpenFile struct {
	OpenFile *OpenFile `protobuf:"bytes,22,opt,name=open_file,json=openFile,proto3,oneof"`
}

type LogEntry_InvalidInvocation struct {
	InvalidInvocation *InvalidInvocation `protobuf:"bytes,23,opt,name=invalid_invocation,json=invalidInvocation,proto3,oneof"`
}

type LogEntry_UsedCredentials struct {
	UsedCredentials *Credentials `protobuf:"bytes,24,opt,name=used_credentials,json=usedCredentials,proto3,oneof"`
}

type LogEntry_Download struct {
	Download *Download `protobuf:"bytes,25,opt,name=download,proto3,oneof"`
}

type LogEntry_Panic struct {
	Panic *Panic `protobuf:"bytes,26,opt,name=panic,proto3,oneof"`
}

type LogEntry_HoneypotEvent struct {
	HoneypotEvent *HoneypotEvent `protobuf:"bytes,27,opt,name=honeypot_event,json=honeypotEvent,proto3,oneof"`
}

func (*LogEntry_LoginAttempt) isLogEntry_LogType() {}

func (*LogEntry_FilesystemOperation) isLogEntry_LogType() {}

func (*LogEntry_OpenTtyLog) isLogEntry_LogType() {}

func (*LogEntry_ConnectionLost) isLogEntry_LogType() {}

func (*LogEntry_RunCommand) isLogEntry_LogType() {}

func (*LogEntry_UnknownCommand) isLogEntry_LogType() {}

func (*LogEntry_TerminalUpdate) isLogEntry_LogType() {}

func (*LogEntry_OpenFile) isLogEntry_LogType() {}

func (*LogEntry_InvalidInvocation) isLogEntry_LogType() {}

func (*LogEntry_UsedCredentials) isLogEntry_LogType() {}

func (*LogEntry_Download) isLogEntry_LogType() {}

func (*LogEntry_Panic) isLogEntry_LogType() {}

func (*LogEntry_HoneypotEvent) isLogEntry_LogType() {}

type FilesystemOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilesystemOp) Reset() {
	*x = FilesystemOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemOp) ProtoMessage() {}

func (x *FilesystemOp) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemOp.ProtoReflect.Descriptor instead.
func (*FilesystemOp) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

type LoginAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of the login attempt.
	Result OperationResult `protobuf:"varint,1,opt,name=result,proto3,enum=OperationResult" json:"result,omitempty"`
	// The username the login attempted to use.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Public key of the login attempt in SSH wire format
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Password used in the login attempt.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Remote address of the machine.
	RemoteAddr string `protobuf:"bytes,5,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	// Environment variables in key=value format.
	EnvironmentVariables []string `protobuf:"bytes,6,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	// Shell parsed command string.
	Command []string `protobuf:"bytes,7,rep,name=command,proto3" json:"command,omitempty"`
	// Raw command string as passed to SSH.
	RawCommand string `protobuf:"bytes,8,opt,name=raw_command,json=rawCommand,proto3" json:"raw_command,omitempty"`
	// The SSH subsystem requested.
	Subsystem string `protobuf:"bytes,9,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (x *LoginAttempt) Reset() {
	*x = LoginAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAttempt) ProtoMessage() {}

func (x *LoginAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAttempt.ProtoReflect.Descriptor instead.
func (*LoginAttempt) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *LoginAttempt) GetResult() OperationResult {
	if x != nil {
		return x.Result
	}
	return OperationResult_UNKNOWN
}

func (x *LoginAttempt) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginAttempt) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *LoginAttempt) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginAttempt) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *LoginAttempt) GetEnvironmentVariables() []string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *LoginAttempt) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *LoginAttempt) GetRawCommand() string {
	if x != nil {
		return x.RawCommand
	}
	return ""
}

func (x *LoginAttempt) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

type OpenTTYLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OpenTTYLog) Reset() {
	*x = OpenTTYLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenTTYLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTTYLog) ProtoMessage() {}

func (x *OpenTTYLog) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTTYLog.ProtoReflect.Descriptor instead.
func (*OpenTTYLog) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *OpenTTYLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConnectionLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionLost) Reset() {
	*x = ConnectionLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionLost) ProtoMessage() {}

func (x *ConnectionLost) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionLost.ProtoReflect.Descriptor instead.
func (*ConnectionLost) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{4}
}

type RunCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shell parsed command string.
	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	// Environment variables in key=value format.
	EnvironmentVariables []string `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	// Path to the resolved command.
	ResolvedCommandPath string `protobuf:"bytes,4,opt,name=resolved_command_path,json=resolvedCommandPath,proto3" json:"resolved_command_path,omitempty"`
}

func (x *RunCommand) Reset() {
	*x = RunCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommand) ProtoMessage() {}

func (x *RunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommand.ProtoReflect.Descriptor instead.
func (*RunCommand) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{5}
}

func (x *RunCommand) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RunCommand) GetEnvironmentVariables() []string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *RunCommand) GetResolvedCommandPath() string {
	if x != nil {
		return x.ResolvedCommandPath
	}
	return ""
}

type UnknownCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shell parsed command string.
	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	// The reason the command was unknown.
	Status UnknownCommand_UnknownCommandStatus `protobuf:"varint,2,opt,name=status,proto3,enum=UnknownCommand_UnknownCommandStatus" json:"status,omitempty"`
	// Any associated error message.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *UnknownCommand) Reset() {
	*x = UnknownCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownCommand) ProtoMessage() {}

func (x *UnknownCommand) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownCommand.ProtoReflect.Descriptor instead.
func (*UnknownCommand) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{6}
}

func (x *UnknownCommand) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *UnknownCommand) GetStatus() UnknownCommand_UnknownCommandStatus {
	if x != nil {
		return x.Status
	}
	return UnknownCommand_UNKNOWN
}

func (x *UnknownCommand) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TerminalUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of the terminal in characters.
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Height of the terminal in charactres.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Name of the connected terminal.
	Term string `protobuf:"bytes,3,opt,name=term,proto3" json:"term,omitempty"`
	// Whether the terminal is a PTY.
	IsPty bool `protobuf:"varint,4,opt,name=is_pty,json=isPty,proto3" json:"is_pty,omitempty"`
}

func (x *TerminalUpdate) Reset() {
	*x = TerminalUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUpdate) ProtoMessage() {}

func (x *TerminalUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUpdate.ProtoReflect.Descriptor instead.
func (*TerminalUpdate) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7}
}

func (x *TerminalUpdate) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TerminalUpdate) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TerminalUpdate) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *TerminalUpdate) GetIsPty() bool {
	if x != nil {
		return x.IsPty
	}
	return false
}

type OpenFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of the file that was opened.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *OpenFile) Reset() {
	*x = OpenFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFile) ProtoMessage() {}

func (x *OpenFile) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFile.ProtoReflect.Descriptor instead.
func (*OpenFile) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{8}
}

func (x *OpenFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// A potential missing Honeypot feature, should be reported or fixed.
type InvalidInvocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The name of the file logging the error.
	SourceFile string `protobuf:"bytes,3,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	// The line of the file logging the error.
	SourceLine uint32 `protobuf:"varint,4,opt,name=source_line,json=sourceLine,proto3" json:"source_line,omitempty"`
	// The module version of the program.
	ModVersion string `protobuf:"bytes,5,opt,name=mod_version,json=modVersion,proto3" json:"mod_version,omitempty"`
	// The checksum of the program.
	ModSum string `protobuf:"bytes,6,opt,name=mod_sum,json=modSum,proto3" json:"mod_sum,omitempty"`
}

func (x *InvalidInvocation) Reset() {
	*x = InvalidInvocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidInvocation) ProtoMessage() {}

func (x *InvalidInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidInvocation.ProtoReflect.Descriptor instead.
func (*InvalidInvocation) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{9}
}

func (x *InvalidInvocation) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *InvalidInvocation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *InvalidInvocation) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *InvalidInvocation) GetSourceLine() uint32 {
	if x != nil {
		return x.SourceLine
	}
	return 0
}

func (x *InvalidInvocation) GetModVersion() string {
	if x != nil {
		return x.ModVersion
	}
	return ""
}

func (x *InvalidInvocation) GetModSum() string {
	if x != nil {
		return x.ModSum
	}
	return ""
}

// A set of credentials that the honeypot collected.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username used to authenticate.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password used to authenticate.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Private key used to authenticate.
	PrivateKey []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{10}
}

func (x *Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Credentials) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

// Information about a downloaded file.
type Download struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the download.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Source of the download.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Command that generated the download.
	Command []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *Download) Reset() {
	*x = Download{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Download) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Download) ProtoMessage() {}

func (x *Download) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Download.ProtoReflect.Descriptor instead.
func (*Download) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{11}
}

func (x *Download) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Download) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Download) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

// Information about a panic.
type Panic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context about what was going on before the panic.
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Stacktrace of the panic.
	Stacktrace string `protobuf:"bytes,2,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
}

func (x *Panic) Reset() {
	*x = Panic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Panic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panic) ProtoMessage() {}

func (x *Panic) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Panic.ProtoReflect.Descriptor instead.
func (*Panic) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{12}
}

func (x *Panic) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Panic) GetStacktrace() string {
	if x != nil {
		return x.Stacktrace
	}
	return ""
}

// Information about a honeypot status.
type HoneypotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context about what was going on before the panic.
	EventType HoneypotEvent_Type `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=HoneypotEvent_Type" json:"event_type,omitempty"`
}

func (x *HoneypotEvent) Reset() {
	*x = HoneypotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoneypotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoneypotEvent) ProtoMessage() {}

func (x *HoneypotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoneypotEvent.ProtoReflect.Descriptor instead.
func (*HoneypotEvent) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{13}
}

func (x *HoneypotEvent) GetEventType() HoneypotEvent_Type {
	if x != nil {
		return x.EventType
	}
	return HoneypotEvent_UNKNOWN
}

var File_log_proto protoreflect.FileDescriptor

var file_log_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x06, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x54, 0x59, 0x4c, 0x6f, 0x67, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x3a, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x61, 0x6e, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x0e, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x70, 0x6f, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x48,
	0x6f, 0x6e, 0x65, 0x79, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x68, 0x6f, 0x6e, 0x65, 0x79, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x0f, 0x22,
	0x0e, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x22,
	0xbe, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x20, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x54, 0x59, 0x4c, 0x6f, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a,
	0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x22, 0x69, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x74, 0x79, 0x22, 0x1e, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbf, 0x01, 0x0a,
	0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x53, 0x75, 0x6d, 0x22, 0x66,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x61, 0x6e, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x0d, 0x48,
	0x6f, 0x6e, 0x65, 0x79, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a,
	0x38, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x6c, 0x65,
	0x77, 0x69, 0x73, 0x34, 0x32, 0x2f, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x73, 0x73, 0x68, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData = file_log_proto_rawDesc
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_log_proto_rawDescData)
	})
	return file_log_proto_rawDescData
}

var file_log_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_log_proto_goTypes = []interface{}{
	(OperationResult)(0),                     // 0: OperationResult
	(UnknownCommand_UnknownCommandStatus)(0), // 1: UnknownCommand.UnknownCommandStatus
	(HoneypotEvent_Type)(0),                  // 2: HoneypotEvent.Type
	(*LogEntry)(nil),                         // 3: LogEntry
	(*FilesystemOp)(nil),                     // 4: FilesystemOp
	(*LoginAttempt)(nil),                     // 5: LoginAttempt
	(*OpenTTYLog)(nil),                       // 6: OpenTTYLog
	(*ConnectionLost)(nil),                   // 7: ConnectionLost
	(*RunCommand)(nil),                       // 8: RunCommand
	(*UnknownCommand)(nil),                   // 9: UnknownCommand
	(*TerminalUpdate)(nil),                   // 10: TerminalUpdate
	(*OpenFile)(nil),                         // 11: OpenFile
	(*InvalidInvocation)(nil),                // 12: InvalidInvocation
	(*Credentials)(nil),                      // 13: Credentials
	(*Download)(nil),                         // 14: Download
	(*Panic)(nil),                            // 15: Panic
	(*HoneypotEvent)(nil),                    // 16: HoneypotEvent
}
var file_log_proto_depIdxs = []int32{
	5,  // 0: LogEntry.login_attempt:type_name -> LoginAttempt
	4,  // 1: LogEntry.filesystem_operation:type_name -> FilesystemOp
	6,  // 2: LogEntry.open_tty_log:type_name -> OpenTTYLog
	7,  // 3: LogEntry.connection_lost:type_name -> ConnectionLost
	8,  // 4: LogEntry.run_command:type_name -> RunCommand
	9,  // 5: LogEntry.unknown_command:type_name -> UnknownCommand
	10, // 6: LogEntry.terminal_update:type_name -> TerminalUpdate
	11, // 7: LogEntry.open_file:type_name -> OpenFile
	12, // 8: LogEntry.invalid_invocation:type_name -> InvalidInvocation
	13, // 9: LogEntry.used_credentials:type_name -> Credentials
	14, // 10: LogEntry.download:type_name -> Download
	15, // 11: LogEntry.panic:type_name -> Panic
	16, // 12: LogEntry.honeypot_event:type_name -> HoneypotEvent
	0,  // 13: LoginAttempt.result:type_name -> OperationResult
	1,  // 14: UnknownCommand.status:type_name -> UnknownCommand.UnknownCommandStatus
	2,  // 15: HoneypotEvent.event_type:type_name -> HoneypotEvent.Type
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenTTYLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidInvocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Download); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Panic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoneypotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_log_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LogEntry_LoginAttempt)(nil),
		(*LogEntry_FilesystemOperation)(nil),
		(*LogEntry_OpenTtyLog)(nil),
		(*LogEntry_ConnectionLost)(nil),
		(*LogEntry_RunCommand)(nil),
		(*LogEntry_UnknownCommand)(nil),
		(*LogEntry_TerminalUpdate)(nil),
		(*LogEntry_OpenFile)(nil),
		(*LogEntry_InvalidInvocation)(nil),
		(*LogEntry_UsedCredentials)(nil),
		(*LogEntry_Download)(nil),
		(*LogEntry_Panic)(nil),
		(*LogEntry_HoneypotEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_log_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		EnumInfos:         file_log_proto_enumTypes,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_rawDesc = nil
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
