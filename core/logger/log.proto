syntax = "proto3";

option go_package = "github.com/josephlewis42/honeyssh/core/logger";

message LogEntry {
  // Timestamp of the log event in micros since the UNIX epoch.
  int64	timestamp_micros = 1;

  // Unique session identifier for the log message. Blank if the event
  // wasn't in the context of a session.
  string session_id = 2;

  // Low values have fast decode so reserve them for future top-level use.
  reserved 3 to 14;

  oneof log_type {
    // An attempt to log in to the honeypot.
    LoginAttempt login_attempt = 15; // ID < 16 for fast proto decoding.
    FilesystemOp filesystem_operation = 16;
    OpenTTYLog open_tty_log = 17;
    ConnectionLost connection_lost = 18;
    RunCommand run_command = 19;
    UnknownCommand unknown_command = 20;
    TerminalUpdate terminal_update = 21;
    OpenFile open_file = 22;
    InvalidInvocation invalid_invocation = 23;
    Credentials used_credentials = 24;
    Download download = 25;
    Panic panic = 26;
    HoneypotEvent honeypot_event = 27;
  };
}

enum OperationResult {
  UNKNOWN = 0;
  SUCCESS = 1;
  FAILURE = 2;
}

message FilesystemOp {

}

message LoginAttempt {
  // The result of the login attempt.
  OperationResult result = 1;
  // The username the login attempted to use.
  string username = 2;
  // Public key of the login attempt in SSH wire format
  bytes public_key = 3;
  // Password used in the login attempt.
  string password = 4;
  // Remote address of the machine.
  string remote_addr = 5;
  // Environment variables in key=value format.
  repeated string environment_variables = 6;
  // Shell parsed command string.
  repeated string command = 7;
  // Raw command string as passed to SSH.
  string raw_command = 8;
  // The SSH subsystem requested.
  string subsystem = 9;
}

message OpenTTYLog {
  string name = 1;
}

message ConnectionLost {
}

message RunCommand {
  // Shell parsed command string.
  repeated string command = 1;
  // Environment variables in key=value format.
  repeated string environment_variables = 2;
  // Path to the resolved command.
  string resolved_command_path = 4;
}

message UnknownCommand {
  enum UnknownCommandStatus {
    UNKNOWN = 0;
    NOT_FOUND = 1; // Not found in $PATH.
    NOT_IMPLEMENTED = 2; // Executable found, but not implemented.
    LOOKUP_ERROR = 3; // Error looking up the command..
  }

  // Shell parsed command string.
  repeated string command = 1;
  // The reason the command was unknown.
  UnknownCommandStatus status = 2;
  // Any associated error message.
  string error_message = 3;
}

message TerminalUpdate {
  // Width of the terminal in characters.
  int32 width  = 1;
  // Height of the terminal in charactres.
  int32 height = 2;
  // Name of the connected terminal.
  string term = 3;
  // Whether the terminal is a PTY.
  bool is_pty = 4;
}

message OpenFile {
  // Path of the file that was opened.
  string path = 1;
}

// A potential missing Honeypot feature, should be reported or fixed.
message InvalidInvocation {
  repeated string command = 1;
  string error = 2;
  // The name of the file logging the error.
  string source_file = 3;
  // The line of the file logging the error.
  uint32 source_line = 4;
  // The module version of the program.
  string mod_version = 5;
  // The checksum of the program.
  string mod_sum = 6;
}

// A set of credentials that the honeypot collected.
message Credentials {
  // Username used to authenticate.
  string username = 1;
  // Password used to authenticate.
  string password = 2;
  // Private key used to authenticate.
  bytes private_key = 3;
}

// Information about a downloaded file.
message Download {
  // Name of the download.
  string name = 1;
  // Source of the download.
  string source = 2;
  // Command that generated the download.
  repeated string command = 3;
}

// Information about a panic.
message Panic {
  // Context about what was going on before the panic.
  string context = 1;
  // Stacktrace of the panic.
  string stacktrace = 2;
}

// Information about a honeypot status.
message HoneypotEvent {
  enum Type {
    UNKNOWN = 0;
    START = 1; // Honeypot started
    TERMINATE = 2; // Honeypot shutting down.
  }

  // Context about what was going on before the panic.
  Type event_type = 1;
}
