package config

import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"sync"
	"time"

	"github.com/spf13/afero"
)

// Initialize creates the honeypot configuration in the given directory.
func Initialize(path string, logger *log.Logger) (*Configuration, error) {
	// Make sure path exists
	full, err := filepath.Abs(path)
	if err != nil {
		return nil, err
	}
	stat, err := os.Stat(full)
	if err != nil {
		return nil, err
	}
	if !stat.Mode().IsDir() {
		return nil, errors.New("intialization path must be a directory")
	}

	logger.Println("Creating configuration in:", full)

	// Set up configuration file.
	cfg := defaultConfig()
	cfg.configFs = afero.NewBasePathFs(afero.NewOsFs(), full)

	logger.Println("Generating private key...")
	privateKey, err := generateRSAKey(logger)
	if err != nil {
		return nil, err
	}

	logger.Println("Creating configuration files...")
	exists := func(path string) bool {
		// This is hacky, but good enough.
		_, err := cfg.fs().Stat(path)
		return err == nil
	}

	configFiles := []struct {
		path     string
		contents []byte
	}{
		{ConfigurationName, defaultConfigData},
		{PrivateKeyName, privateKey},
		{RootFSName, rootFsData},
	}
	for _, configFile := range configFiles {
		if !exists(configFile.path) {
			logger.Println("  ", configFile.path)
			if err := afero.WriteFile(cfg.fs(), configFile.path, configFile.contents, 0600); err != nil {
				return nil, fmt.Errorf("couldn't write configuration file to %q: %v", configFile.path, err)
			}
		} else {
			logger.Println("  ", configFile.path, "(skipped, it already exists)")
		}
	}

	// Make directories.
	logger.Println("Making directories...")
	for _, dir := range []string{
		DownloadDirName,
		LogsDirName,
	} {
		logger.Println("  ", dir)
		if err := cfg.fs().MkdirAll(dir, 0700); err != nil {
			return nil, fmt.Errorf("couldn't make directory %q: %v", dir, err)
		}
	}

	return cfg, nil
}

func generateRSAKey(logger *log.Logger) ([]byte, error) {
	logger.Println(
		"WARNING: The generated RSA key SHOULD NOT be used for " +
			"real security, it wasn't generated by a cryptographically secure RNG.")

	key, err := rsa.GenerateKey(&insecureRandomReader{}, 2048)
	if err != nil {
		return nil, fmt.Errorf("couldn't create private key: %v", err)
	}

	pemBlock := pem.EncodeToMemory(&pem.Block{
		Type:  "RSA PRIVATE KEY",
		Bytes: x509.MarshalPKCS1PrivateKey(key),
	})

	return pemBlock, nil
}

type insecureRandomReader struct {
	once sync.Once
	rand *rand.Rand
}

func (irr *insecureRandomReader) Read(bytes []byte) (int, error) {
	irr.once.Do(func() {
		irr.rand = rand.New(rand.NewSource(time.Now().UnixNano()))
	})

	return irr.rand.Read(bytes)
}
